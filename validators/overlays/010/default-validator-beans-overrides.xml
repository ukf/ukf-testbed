<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    default-lazy-init="true"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <bean id="child.MigrationAssistanceBean" lazy-init="false" parent="mda.MigrationAssistanceBean"/>

    <!--
        ***************************************
        ***                                 ***
        ***   U R L   V A L I D A T I O N   ***
        ***                                 ***
        ***************************************
    -->

    <!--
        Shared validator beans.

        The beans in this section have both "id" values by which they can
        be referenced in Spring configuration, but also simpler "p:id"
        values to simplify their contributions to error messages
        composed from a series of component ID values.
    -->

    <!-- Reject "https://host:/xxx" because libxml2 has issues with that. -->
    <bean id="validate_url_port" p:id="port" parent="mda.EmptyPortURLValidator"/>

    <!-- Reject "https:///xxx" because it lacks an authority entirely. -->
    <bean id="validate_url_host" p:id="host" parent="mda.MissingHostURLValidator"/>

    <!-- Reject URLs which don't have an https:// protocol. -->
    <bean id="validate_url_https" p:id="https" parent="mda.HTTPSProtocolURLValidator"/>

    <!--
        validate_url

        Validate a string as a URL. Includes checking for port and host
        issues.
    -->
    <bean id="validate_url" p:id="url" parent="mda.AsURLStringValidator" lazy-init="true">
        <property name="validators">
            <list>
                <ref bean="validate_url_port"/>
                <ref bean="validate_url_host"/>
            </list>
        </property>
    </bean>

    <!--
        validate_https_url

        Validate a string as a https:// URL. Includes checking for port and host
        issues.
    -->
    <bean id="validate_https_url" p:id="url" parent="mda.AsURLStringValidator" lazy-init="true">
        <property name="validators">
            <list>
                <ref bean="validate_url_https"/>
                <ref bean="validate_url_port"/>
                <ref bean="validate_url_host"/>
            </list>
        </property>
    </bean>

    <!--
        check_mdui_urls

        Check URL values of mdui:* elements other than mdui:Logo.
    -->
    <bean id="check_mdui_urls" parent="mda.StringElementValidationStage"
        p:validators-ref="validate_url">
        <property name="elementNames">
            <set>
                <ref bean="mdui-InformationURL"/>
                <ref bean="mdui-PrivacyStatementURL"/>
            </set>
        </property>
    </bean>

    <!--
        check_mdui_logo_url

        Section 2.1.5: Check the URL value of mdui:Logo elements.
    -->
    <bean id="check_mdui_logo_url" parent="mda.StringElementValidationStage">
        <property name="elementName" ref="mdui-Logo"/>
        <property name="validators">
            <list>
                <bean p:id="newline" parent="mda.RejectStringRegexValidator"
                    p:regex=".*\n.*"
                    p:message="mdui:Logo contains line break" />
                <bean p:id="nbs" parent="mda.RejectStringRegexValidator"
                    p:regex=".*\u00a0.*"
                    p:message="mdui:Logo contains non-breaking space" />
                <!-- Accept data: URLs with no further scrutiny. -->
                <bean parent="mda.AcceptStringRegexValidator"
                    p:regex="data:.*"/>
                <ref bean="validate_url"/>
            </list>
        </property>
    </bean>



    <!--
        check_reqattr - override to add jdk.xml.xpathExprOpLimit attribute required for 
        the native JDK XSLT processor
    -->
    <bean id="check_reqattr" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_reqattr.xsl">
        <property name="transformAttributes">
            <map>
                <entry key="jdk.xml.xpathExprOpLimit" value="0"/>
            </map>
        </property>
    </bean>
    
    <!-- Locations of these lists have changed in 0.10 -->
    <bean id="compromised.2048" parent="X509RSAOpenSSLBlacklistValidator"
        p:keySize="2048"
        p:blacklistResource="classpath:net/shibboleth/metadata/keylists/rsa/compromised-2048.txt"/>
    <bean id="X509RSAOpenSSLBlacklistValidator" abstract="true" parent="mda.validator_parent"
        class="net.shibboleth.metadata.validate.x509.X509RSAOpenSSLBlacklistValidator"/>
     <bean id="debian.2048" parent="X509RSAOpenSSLBlacklistValidator"
        p:keySize="2048"
        p:blacklistResource="classpath:net/shibboleth/metadata/keylists/rsa/debian-2048.txt"/>
    <bean id="debian.4096" parent="X509RSAOpenSSLBlacklistValidator"
        p:keySize="4096"
        p:blacklistResource="classpath:net/shibboleth/metadata/keylists/rsa/debian-4096.txt"/>

</beans>
